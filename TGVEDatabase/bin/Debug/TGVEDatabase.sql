/*
Deployment script for TGVEDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar LoadSampleData "false"
:setvar DatabaseName "TGVEDatabase"
:setvar DefaultFilePrefix "TGVEDatabase"
:setvar DefaultDataPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\TGVEDatabase"
:setvar DefaultLogPath "C:\Users\STUDENT\AppData\Local\Microsoft\VisualStudio\SSDT\TGVEDatabase"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Creating [dbo].[Booking]...';


GO
CREATE TABLE [dbo].[Booking] (
    [Payment]    MONEY    NOT NULL,
    [DateBooked] DATETIME NULL,
    [ClientID]   INT      NOT NULL,
    [EventID]    INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([ClientID] ASC, [EventID] ASC)
);


GO
PRINT N'Creating [dbo].[Client]...';


GO
CREATE TABLE [dbo].[Client] (
    [ClientID]  INT        NOT NULL,
    [FirstName] NCHAR (50) NULL,
    [LastName]  NCHAR (50) NOT NULL,
    [Gender]    CHAR (1)   NULL,
    PRIMARY KEY CLUSTERED ([ClientID] ASC)
);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [EventID]   INT      NOT NULL,
    [EventDate] DATETIME NOT NULL,
    [Fees]      MONEY    NOT NULL,
    [TourID]    INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([EventID] ASC)
);


GO
PRINT N'Creating [dbo].[Tour]...';


GO
CREATE TABLE [dbo].[Tour] (
    [TourID]      INT         NOT NULL,
    [TourName]    NCHAR (50)  NOT NULL,
    [Description] NCHAR (300) NOT NULL,
    PRIMARY KEY CLUSTERED ([TourID] ASC),
    CONSTRAINT [UniqueTourName] UNIQUE NONCLUSTERED ([TourName] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Booking]...';


GO
ALTER TABLE [dbo].[Booking] WITH NOCHECK
    ADD FOREIGN KEY ([ClientID]) REFERENCES [dbo].[Client] ([ClientID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Booking]...';


GO
ALTER TABLE [dbo].[Booking] WITH NOCHECK
    ADD FOREIGN KEY ([EventID]) REFERENCES [dbo].[Event] ([EventID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Event]...';


GO
ALTER TABLE [dbo].[Event] WITH NOCHECK
    ADD FOREIGN KEY ([TourID]) REFERENCES [dbo].[Tour] ([TourID]);


GO
PRINT N'Creating [dbo].[GenderMorF]...';


GO
ALTER TABLE [dbo].[Client] WITH NOCHECK
    ADD CONSTRAINT [GenderMorF] CHECK ([Gender] IN('M','F'));


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
IF '$(LoadSampleData)' = 'true'
BEGIN

DELETE [Booking];
DELETE [Event];
DELETE [Tour];
DELETE [Client];

INSERT INTO [Client] ([ClientID],FirstName,LastName,[Gender]) VALUES
(1,'Taylor','Price','M'),
(2,'Ellyse','Gamble','F'),
(3,'Tilly','Tan','F')


INSERT INTO [Tour] ([TourID],[TourName],[Description]) VALUES
(1,'West','Tour of wineries and outlets of the Geelong and Otways region'),
(2,'East','Tour of wineries and outlets of the Yarra Valley'),
(3,'South','Tour of wineries and outlets of Mornington Penisula'),
(4,'North','Tour of wineries and outlets of the Bedigo and Castlemaine region')



INSERT INTO [Event] ([EventID],[TourID],[EventDate],[Fees]) VALUES
(1,4,'2016-01-09',200),
(2,4,'2016-02-13',225),
(3,3,'2016-01-16',200),
(4,1,'2016-01-29',225)


INSERT INTO [Booking] ([ClientID],[EventID],[Payment],[DateBooked]) VALUES
(1,1,200,'2015-12-10'),
(2,1,200,'2015-12-16'),
(1,2,225,'2016-01-08'),
(2,2,225,'2016-01-14'),
(3,2,225,'2016-02-03'),
(1,3,200,'2015-12-10'),
(2,3,200,'2015-12-18'),
(3,3,200,'2016-01-09'),
(2,4,200,'2015-12-17'),
(3,4,200,'2015-12-18')

END
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Client] WITH CHECK CHECK CONSTRAINT [GenderMorF];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.Booking'), OBJECT_ID(N'dbo.Event'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
